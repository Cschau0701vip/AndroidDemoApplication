name: Android Build and Deployment Pipeline

on:
  push:
   branches:
      - "master"

#  workflow_dispatch:
#    inputs:
#      app_id:
#        description: 'The application Id of the current build'
#        required: true
#     branch:
#        description: 'The branch from which we have to build'
#        required: true
#        default: 'master'

jobs:
#   STEP 1 : Setup and Build the Project
  build:
    name: Setup Environment and build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code to specific branch
        uses: actions/checkout@v2
#        with:
#          ref: ${{ github.event.inputs.branch }}
            
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
                
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Use Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Generate App bundle (.aab)
        run: ./gradlew app:bundleRelease --stacktrace
        
      - name: Check Current Path
        shell: bash
        run: | 
          #ls -R ./ 
          find . -type f -name "*.aab"
          pwd
          
      - name: Generate Test bundle (.apk)
        run: ./gradlew app:assembleAndroidTest --stacktrace
        
      - name: Check Current Path
        shell: bash
        run: | 
          #ls -R ./ 
          find . -type f -name "*.apk"
          pwd
          
      - name: Run Gradle Linters
        run: ./gradlew check
        
      - name: Test App bundle
        run:  ./gradlew test
        
      - name: Signing App Bundle
        id: sign_app
        run: |
          jarsigner -keystore app/*.jks \
          -storepass ${{ secrets.KEY_STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} \
          app/build/outputs/bundle/release/app-release.aab ${{ secrets.ALIAS }}
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/app/build/outputs
          name: android_artifact
          
      - name: Check Path
        shell: bash
        run: | 
          find . -type f -name "*.a*"
          pwd
          
# Step 2 : Release to app center
  deploy:
    needs: [ build ]
    name: Create release on app center
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the branch
        uses: actions/checkout@v3
      
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: android_artifact
          # Destination path
          path: ~/app/build
      
      - name: Check Current Path
        shell: bash
        run: | 
          ls -R ~/app/build
          pwd
          
  #    - name: Extract the Zip File
  #      run: unzip ~/app/build/android_artifact.zip -d ~/app/build
    
      - name: App Center Distribute
        uses: devussy/AppCenter-Distribute-Github-Action@v1.0.2
        with:
          # App name followed by username e.g. devussy/Sample-App
          app: 'chetan.chaudhari-nagarro.com/android-demo-app'
          # Upload token - you can get one from appcenter.ms/settings
          token: $${ secrets.APP_CENTER_API_TOKEN_KEY }
          # Distribution group
          group: Chetan
          # Artifact to upload (.apk or .ipa)
          file: . #/home/runner/app/build/bundle/release
          # Release notes visible on release page
          releaseNotes: 'Android Demo Application'
          # Flag to determine whether notify testers of this release or not (true/false)
          silent: false # optional, default is true
